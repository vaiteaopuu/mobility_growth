* Overview
This repository contains the code to perform evolutionary simulations considering pairs of regulators that can be knocked up or down. Using measured phenotypic parameters, the code simulates an evolutionary process by which a population of pairs of regulators is knocked up or down, depending on our fitness function (see paper for details). Then, the analyses of these trajectories are also given in the format of a notebook (reproducing the figure from the paper).

Fig 6; Fig SI 5-6 can be reproduced by running the code snippets in
~reproduce_fig.org~.

DOI: 10.5281/zenodo.10198999

** Requirements
The code is written in Python (compatible with version >= 3.10.9) with the following dependencies:
- numpy==1.23.5
- matplotlib==3.7.0
- multiprocess==0.70.14

The code has been tested on a Linux machine with 20 cores 12th Gen Intel(R) Core(TM) i7. Typically, in a simulation with a population size of 2000, running 2000 generations lasts less than a minute.

** What do you need for the simulations

To perform the simulations, you need the scripts that are in the ~src/~
directory. ~src/evo_four_state.py~ contains the functions performing the
simulations whereas ~src/plots.py~ contains the ones for plotting results. Then,
the phenotypic parameters (growth and swim) are given in the ~/data/growth.data~
directory.

#+begin_example
# Perturbation	Media	Growth_Fitness	Growth_Error (SEM)	Swimming_Fitness	Swimming_Error (SEM)	# Knockdowns
WT	LB	0	0.00651859610792712	0	0.0313824110090468	0
CRP	LB	0.03281281502607	0.028674094725906	-0.92222	0.02213130383935	1
Fis	LB	0.132171670553366	0.012935957123226	-0.775555	0.015130681097127	1
...
#+end_example

** How to run a simulation

The snippet below shows how to use the scripts in the src directory to perform
evolutionary simulations. Here, we show an example for the regulators HNS and
FlhDC.

The routine ~evo_loop_env_change~ from the ~src.evo_four_states~ script performs
the evolutionary simulation. First, it requires the phenotypic parameters
measured. Second, the user can choose the population size, maximum number of
generations, the frequency at which the environment is changed, and the mutation
rate in the population.

In the output, the populations as well as the mutations accepted are recorded in
two variables for each generation. Here, the genotypes are encoded in the
following way RS = (-1, -1); Delta Local = (1, -1); Delta Global (-1, 1); and
double knock down = (1, 1).

#+begin_src python
import numpy as np
import matplotlib.pyplot as plt

from src.evo_four_states import MUTANTS, read_pheno, get_fitness, sigmoid, evo_loop_env_change, norm_growth
from collections import Counter

gen_a = "HNS"
gen_b = "FlhDC"

# read the phenotype
pheno_env_norm = []
for env in ["LB", "Glucose", "Lactose"]:
    pheno_env_norm += [norm_growth(read_pheno(gen_a, gen_b, env))]

# Fitness parameters
wl = 0.3                        # lambda
w0 = -1.0                       # S_0
wk = 2                          # k
parms = [wl, w0, wk]

# simulation parameters
temp = 7                        # temperature of generation
pop_size = 2000                 # population size
nb_gen = 2000                   # number of generations
swap_freq = 200                 # frequency at which the environment is changed
mut_rate = 0.2                  # 20% of mutations

# run the simulation
pop, traj, traj_mut, env_l, pop_l = evo_loop_env_change(pheno_env_norm,
                                                        nb_el=pop_size,
                                                        nb_steps=nb_gen,
                                                        parms=parms, temp=temp,
                                                        swap_freq=swap_freq,
                                                        mut_rate=mut_rate)
# pop --- the last population
# traj --- the fitness along the simulation
# traj_mut --- the list of mutation recorded along the simulation
# env_l --- the list indicating in which environment was each generation
# pop_l --- the population at each generation
#+end_src
